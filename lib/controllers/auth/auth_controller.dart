// controllers/auth_controller.dart
import 'dart:async';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:projeto_padrao/app/app_widget.dart';
import 'package:projeto_padrao/core/utils/logger_service.dart';
import 'package:projeto_padrao/models/perfil_usuario.dart';
import 'package:projeto_padrao/models/security_event.dart';
import 'package:projeto_padrao/services/session/device_service.dart';
import 'package:projeto_padrao/services/session/session_expiry_service.dart';
import 'package:projeto_padrao/services/session/session_tracker_service.dart';
import 'package:projeto_padrao/widgets/session_confirmation_dialog.dart';
import '../../models/usuario.dart';
import '../../services/auth/auth_service.dart';
import '../../services/session/security_monitor_service.dart';

class AuthController with ChangeNotifier {
  final AuthService _authService = AuthService();

  Usuario? _usuarioLogado;
  bool _isLoading = false;
  String? _errorMessage;
  Timer? _activityTimer;

  Usuario? get usuarioLogado => _usuarioLogado;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  bool _sessionInitialized = false;
  String? _currentDeviceId;

  // ‚úÖ M√âTODO CR√çTICO: Definir usu√°rio a partir da sess√£o (para Route Guard)
  void setUserFromSession(Usuario usuario, String deviceId) {
    _usuarioLogado = usuario;
    _currentDeviceId = deviceId;
    _sessionInitialized = true;
    _isLoading = false;

    print(
      '‚úÖ [CONTROLLER] Usu√°rio definido a partir da sess√£o: ${usuario.email}',
    );
    notifyListeners();
  }

  // ‚úÖ M√âTODO PARA VERIFICAR E INICIALIZAR SESS√ÉO (chamado pelo Route Guard)
  Future<void> checkAndInitializeSession() async {
    if (_sessionInitialized) return;

    _setLoading(true);

    try {
      print('üîç [CONTROLLER] Verificando e inicializando sess√£o...');

      // Verifica se tem usu√°rio no Firebase Auth
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser != null) {
        print(
          'üî• [CONTROLLER] Usu√°rio Firebase encontrado: ${currentUser.email}',
        );

        // Busca dados completos no Firestore
        _usuarioLogado = await _authService.getUserById(currentUser.uid);

        if (_usuarioLogado != null) {
          // ‚úÖ VERIFICA SE USU√ÅRIO EST√Å ATIVO
          if (!_usuarioLogado!.ativo) {
            print(
              'üö´ [CONTROLLER] Usu√°rio desativado: ${_usuarioLogado!.nome}',
            );
            await logout();
            _setLoading(false);
            return;
          }

          _currentDeviceId = await DeviceService.getDeviceId();

          // Verifica se sess√£o n√£o est√° expirada
          final isExpired = await SessionTrackerService.isSessionExpired(
            _usuarioLogado!.id,
            _currentDeviceId!,
          );

          if (isExpired) {
            print('‚è∞ [CONTROLLER] Sess√£o expirada');
            await logout();
          } else {
            print('‚úÖ [CONTROLLER] Sess√£o v√°lida: ${_usuarioLogado!.nome}');
            _sessionInitialized = true;

            // Inicia tracking de atividade
            _startActivityTracking();
          }
        }
      }
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro ao verificar sess√£o: $e');
    } finally {
      _setLoading(false);
    }
  }

  // ‚úÖ M√âTODO AUXILIAR PARA VERIFICAR SE USU√ÅRIO EST√Å ATIVO
  Future<Usuario?> _verificarUsuarioAtivo(String email) async {
    try {
      print('üîç [CONTROLLER] Verificando status do usu√°rio: $email');

      // Buscar usu√°rio pelo email no Firestore
      final usuario = await _authService.getUserByEmail(email);

      if (usuario != null) {
        print('üìä [CONTROLLER] Status do usu√°rio ${usuario.nome}:');
        print('   ‚úÖ Ativo: ${usuario.ativo}');
        print('   üìß Email verificado: ${usuario.emailVerificado}');
        print('   üëë Admin: ${usuario.isAdmin}');

        // ‚úÖ VERIFICA√á√ÉO DE USU√ÅRIO DESATIVADO
        if (!usuario.ativo) {
          print('üö´ [CONTROLLER] Usu√°rio desativado: ${usuario.nome}');

          // MONITORAMENTO: Tentativa de login com usu√°rio desativado
          SecurityMonitorService.monitorUserActivity(
            usuario: usuario,
            action: 'login_blocked_disabled_user',
            resource: 'auth_system',
            details: 'Tentativa de login com usu√°rio desativado',
            ipAddress: 'mobile_app',
            severity: SecuritySeverity.medium,
          );

          return null; // Retorna null para indicar usu√°rio desativado
        }

        return usuario; // Retorna usu√°rio se estiver ativo
      }

      print('‚ùå [CONTROLLER] Usu√°rio n√£o encontrado no sistema');
      return null;
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro ao verificar status do usu√°rio: $e');
      return null;
    }
  }

  // Login - ATUALIZADO COM VALIDA√á√ÉO DE USU√ÅRIO DESATIVADO
  Future<bool> login(String email, String password) async {
    _setLoading(true);
    _clearError();

    try {
      print('üîê [CONTROLLER] Iniciando login para: $email');

      // ‚úÖ PRIMEIRO VERIFICA SE O USU√ÅRIO EST√Å ATIVO
      final usuarioAtivo = await _verificarUsuarioAtivo(email);

      if (usuarioAtivo == null) {
        // Usu√°rio desativado ou n√£o encontrado
        _setError(
          'Usu√°rio desativado ou n√£o encontrado. Entre em contato com o administrador.',
        );
        _setLoading(false);
        return false;
      }

      // ‚úÖ SE USU√ÅRIO EST√Å ATIVO, PROSSEGUE COM LOGIN
      _usuarioLogado = await _authService.signInWithEmailAndPassword(
        email,
        password,
      );

      if (_usuarioLogado != null) {
        print('‚úÖ [CONTROLLER] Login bem-sucedido: ${_usuarioLogado!.nome}');

        // üëá OBTER DEVICE ID PERSISTENTE
        _currentDeviceId = await DeviceService.getDeviceId();
        print('üì± [CONTROLLER] DeviceId: $_currentDeviceId');

        // üëá VERIFICAR SE EXISTEM OUTRAS SESS√ïES
        final hasOtherSessions = await _checkAndHandleOtherSessions();

        if (hasOtherSessions) {
          // Usu√°rio cancelou o login devido a outras sess√µes
          _setLoading(false);
          return false;
        }

        // üëá REGISTRAR NOVA SESS√ÉO COM DEVICE ID REAL
        await SessionTrackerService.registerNewSession(
          _usuarioLogado!,
          _currentDeviceId!,
        );

        // üëá CORRE√á√ÉO CR√çTICA: FOR√áAR PERSIST√äNCIA
        await _forcarPersistenciaFirebase();

        // MONITORAMENTO: Login bem-sucedido
        SecurityMonitorService.monitorUserActivity(
          usuario: _usuarioLogado!,
          action: 'login_success',
          resource: 'auth_system',
          details: 'Login realizado com sucesso',
          ipAddress: 'mobile_app',
          userAgent: 'flutter_app',
        );

        _setLoading(false);
        notifyListeners();
        return true;
      } else {
        print('‚ùå [CONTROLLER] Login falhou - usu√°rio null');
        _setLoading(false);
        return false;
      }
    } on FirebaseAuthException catch (e) {
      print('‚ùå [CONTROLLER] FirebaseAuthException: ${e.code}');
      _setError(_traduzirErroFirebase(e.code));
      _setLoading(false);
      return false;
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro inesperado: $e');
      _setError('Erro inesperado: $e');
      _setLoading(false);
      return false;
    }
  }

  Future<bool> _checkAndHandleOtherSessions() async {
    if (_usuarioLogado == null || _currentDeviceId == null) {
      print('‚ùå [CONTROLLER] Dados insuficientes para verificar sess√µes');
      return false;
    }

    try {
      print(
        'üîç [CONTROLLER] Verificando outras sess√µes para ${_usuarioLogado!.nome}',
      );

      // ‚úÖ VERIFICA√á√ÉO MAIS DETALHADA
      final otherSessions = await SessionTrackerService.getOtherActiveSessions(
        _usuarioLogado!.id,
        _currentDeviceId!,
      );

      print(
        'üìä [CONTROLLER] ${otherSessions.length} outras sess√µes encontradas',
      );

      if (otherSessions.isNotEmpty) {
        // ‚úÖ DETALHES DAS SESS√ïES PARA DEBUG
        for (final session in otherSessions.take(3)) {
          // Mostra apenas as 3 primeiras
          print(
            '   üì± Sess√£o: ${session['deviceId']} - ${session['lastActivity']}',
          );
        }

        // ‚úÖ VERIFICA SE √â UMA SESS√ÉO RECENTE (poss√≠vel tentativa de invas√£o)
        final hasRecentSessions = otherSessions.any((session) {
          final lastActivity = session['lastActivity']?.toDate();
          return lastActivity != null &&
              DateTime.now().difference(lastActivity).inMinutes < 5;
        });

        if (hasRecentSessions) {
          print(
            'üö® [CONTROLLER] Sess√µes recentes detectadas - poss√≠vel seguran√ßa comprometida',
          );

          // MONITORAMENTO DE SEGURAN√áA
          SecurityMonitorService.monitorUserActivity(
            usuario: _usuarioLogado!,
            action: 'concurrent_session_detected',
            resource: 'auth_system',
            details: 'M√∫ltiplas sess√µes recentes detectadas',
            ipAddress: 'mobile_app',
            severity: SecuritySeverity.high,
          );
        }

        // üëá MOSTRAR DIALOG DE CONFIRMA√á√ÉO MELHORADO
        final bool shouldContinue = await _showSessionConfirmationDialog(
          otherSessions.length,
        );

        if (!shouldContinue) {
          print('üö´ [CONTROLLER] Login cancelado pelo usu√°rio por seguran√ßa');
          await _authService.signOut();
          _usuarioLogado = null;
          _currentDeviceId = null;
          return true;
        }

        // üëá DESCONECTAR SESS√ïES COM CONFIRMA√á√ÉO
        print(
          'üîí [CONTROLLER] Desconectando ${otherSessions.length} sess√µes...',
        );
        await SessionTrackerService.terminateOtherSessions(
          _usuarioLogado!.id,
          _currentDeviceId!,
        );

        print('‚úÖ [CONTROLLER] Sess√µes desconectadas com sucesso');
      }

      return false;
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro cr√≠tico ao verificar sess√µes: $e');

      // Em caso de erro, por seguran√ßa, n√£o permite o login
      SecurityMonitorService.monitorUserActivity(
        usuario: _usuarioLogado ?? _createTempUser('unknown'),
        action: 'session_check_failed',
        resource: 'auth_system',
        details: 'Erro ao verificar sess√µes: $e',
        ipAddress: 'mobile_app',
        severity: SecuritySeverity.high,
      );

      return true; // Bloqueia o login por seguran√ßa
    }
  }

  // üëá M√âTODO CORRIGIDO PARA MOSTRAR DIALOG
  Future<bool> _showSessionConfirmationDialog(int otherSessionsCount) async {
    final context = NavigationService.navigatorKey.currentContext;
    if (context == null) {
      print('‚ùå [CONTROLLER] Context n√£o dispon√≠vel para mostrar dialog');
      return true; // Continuar por padr√£o
    }

    print('üí¨ [CONTROLLER] Mostrando dialog de confirma√ß√£o...');

    // Usar Future.delayed para garantir que o contexto esteja pronto
    await Future.delayed(Duration(milliseconds: 100));

    final result = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => SessionConfirmationDialog(
        userId: _usuarioLogado!.id,
        currentDeviceId: _currentDeviceId!,
        otherSessionsCount: otherSessionsCount,
        onConfirm: () {
          print('‚úÖ [DIALOG] Usu√°rio confirmou - desconectando outras sess√µes');
          Navigator.of(context).pop(true);
        },
        onCancel: () {
          print('‚ùå [DIALOG] Usu√°rio cancelou - mantendo sess√µes ativas');
          Navigator.of(context).pop(false);
        },
      ),
    );

    print('üéØ [CONTROLLER] Resultado do dialog: ${result ?? false}');
    return result ?? false;
  }

  // üëá ADICIONE ESTE M√âTODO NOVO
  Future<void> _forcarPersistenciaFirebase() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        LoggerService.debug('PERSISTENCE', 'For√ßando persist√™ncia Firebase:');
        LoggerService.debug('PERSISTENCE', '   üë§ UID: ${user.uid}');
        LoggerService.debug('PERSISTENCE', '   üìß Email: ${user.email}');
        LoggerService.debug(
          'PERSISTENCE',
          '   ‚úÖ Verificado: ${user.emailVerified}',
        );

        // ‚úÖ TENTATIVA DE PERSIST√äNCIA MAIS ROBUSTA
        await user.reload();
        final refreshedUser = FirebaseAuth.instance.currentUser;

        if (refreshedUser != null) {
          LoggerService.success('PERSISTENCE', 'Sess√£o persistida com sucesso');

          // ‚úÖ VERIFICA SE O TOKEN √â V√ÅLIDO
          final token = await refreshedUser.getIdToken();
          LoggerService.debug(
            'PERSISTENCE',
            '   üîê Token v√°lido: ${token?.isNotEmpty}',
          );
        } else {
          LoggerService.error(
            'PERSISTENCE',
            'Falha na persist√™ncia - usu√°rio null ap√≥s reload',
          );
        }
      }
    } catch (e) {
      LoggerService.error(
        'PERSISTENCE',
        'Erro ao for√ßar persist√™ncia',
        error: e,
      );
    }
  }

  // Cadastro
  Future<bool> cadastrar(String nome, String email, String password) async {
    _setLoading(true);
    _clearError();

    try {
      print('üë§ [CONTROLLER] Iniciando cadastro para: $email');

      _usuarioLogado = await _authService.signUpWithEmailAndPassword(
        email,
        password,
        nome,
      );

      if (_usuarioLogado != null) {
        print('‚úÖ [CONTROLLER] Cadastro bem-sucedido: ${_usuarioLogado!.nome}');

        // MONITORAMENTO: Novo usu√°rio cadastrado
        SecurityMonitorService.monitorUserActivity(
          usuario: _usuarioLogado!,
          action: 'user_created',
          resource: 'auth_system',
          details: 'Novo usu√°rio cadastrado no sistema',
          ipAddress: 'mobile_app',
          userAgent: 'flutter_app',
        );

        _setLoading(false);
        notifyListeners();
        return true;
      } else {
        print('‚ùå [CONTROLLER] Cadastro falhou - usu√°rio null');
        _setError('Falha ao criar usu√°rio');
        _setLoading(false);
        return false;
      }
    } on FirebaseAuthException catch (e) {
      print('‚ùå [CONTROLLER] FirebaseAuthException no cadastro: ${e.code}');

      // MONITORAMENTO: Erro no cadastro
      SecurityMonitorService.monitorUserActivity(
        usuario: _createTempUser(email),
        action: 'signup_failed',
        resource: 'auth_system',
        details: 'FirebaseAuthException: ${e.code}',
        ipAddress: 'mobile_app',
      );

      _setError(_traduzirErroFirebase(e.code));
      _setLoading(false);
      return false;
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro inesperado no cadastro: $e');

      // MONITORAMENTO: Erro inesperado no cadastro
      SecurityMonitorService.monitorUserActivity(
        usuario: _createTempUser(email),
        action: 'signup_error',
        resource: 'auth_system',
        details: 'Erro inesperado: $e',
        ipAddress: 'mobile_app',
      );

      _setError('Erro ao cadastrar: $e');
      _setLoading(false);
      return false;
    }
  }

  // Recuperar Senha
  Future<bool> recuperarSenha(String email) async {
    _setLoading(true);
    _clearError();

    try {
      print('üìß [CONTROLLER] Solicitando recupera√ß√£o de senha para: $email');

      await _authService.sendPasswordResetEmail(email);

      print('‚úÖ [CONTROLLER] Email de recupera√ß√£o enviado');

      // MONITORAMENTO: Recupera√ß√£o de senha solicitada
      SecurityMonitorService.monitorUserActivity(
        usuario: _createTempUser(email),
        action: 'password_reset_requested',
        resource: 'auth_system',
        details: 'Solicita√ß√£o de recupera√ß√£o de senha',
        ipAddress: 'mobile_app',
      );

      _setLoading(false);
      return true;
    } on FirebaseAuthException catch (e) {
      print('‚ùå [CONTROLLER] Erro ao recuperar senha: ${e.code}');

      // MONITORAMENTO: Falha na recupera√ß√£o de senha
      SecurityMonitorService.monitorUserActivity(
        usuario: _createTempUser(email),
        action: 'password_reset_failed',
        resource: 'auth_system',
        details: 'FirebaseAuthException: ${e.code}',
        ipAddress: 'mobile_app',
      );

      _setError(_traduzirErroFirebase(e.code));
      _setLoading(false);
      return false;
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro inesperado ao recuperar senha: $e');

      _setError('Erro ao enviar email de recupera√ß√£o: $e');
      _setLoading(false);
      return false;
    }
  }

  // Alterar Senha
  Future<bool> alterarSenha(String novaSenha) async {
    if (_usuarioLogado == null) {
      _setError('Usu√°rio n√£o est√° logado');
      return false;
    }

    _setLoading(true);
    _clearError();

    try {
      print(
        'üîê [CONTROLLER] Alterando senha do usu√°rio: ${_usuarioLogado!.email}',
      );

      // Aqui voc√™ implementaria a l√≥gica de altera√ß√£o de senha
      // Por exemplo, usando Firebase Auth API
      // await _authService.changePassword(novaSenha);

      await Future.delayed(Duration(seconds: 1)); // Simula√ß√£o

      print('‚úÖ [CONTROLLER] Senha alterada com sucesso');

      // MONITORAMENTO CR√çTICO: Altera√ß√£o de senha
      SecurityMonitorService.monitorUserActivity(
        usuario: _usuarioLogado!,
        action: 'password_change',
        resource: 'user_profile',
        details: 'Senha alterada com sucesso',
        ipAddress: 'mobile_app',
        severity: SecuritySeverity.high,
      );

      _setLoading(false);
      return true;
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro ao alterar senha: $e');

      // MONITORAMENTO: Falha na altera√ß√£o de senha
      SecurityMonitorService.monitorUserActivity(
        usuario: _usuarioLogado!,
        action: 'password_change_failed',
        resource: 'user_profile',
        details: 'Erro ao alterar senha: $e',
        ipAddress: 'mobile_app',
      );

      _setError('Erro ao alterar senha: $e');
      _setLoading(false);
      return false;
    }
  }

  // üëá ATUALIZAR M√âTODO DE LOGOUT
  Future<void> logout() async {
    // Parar timer de atividade
    _activityTimer?.cancel();

    if (_usuarioLogado != null && _currentDeviceId != null) {
      await SessionTrackerService.terminateCurrentSession(
        _usuarioLogado!.id,
        _currentDeviceId!,
      );
    }

    _sessionInitialized = false;
    _currentDeviceId = null;
    _usuarioLogado = null;

    await _authService.signOut();
    notifyListeners();

    print('üö™ [CONTROLLER] Logout completo');
  }

  // ‚úÖ ATUALIZAR M√âTODO DE VERIFICA√á√ÉO DE USU√ÅRIO LOGADO
  Future<bool> verificarUsuarioLogado() async {
    try {
      // Verifica se h√° um usu√°rio autenticado no Firebase Auth
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser != null) {
        // Busca os dados completos do usu√°rio no Firestore
        _usuarioLogado = await _authService.getUserById(currentUser.uid);

        if (_usuarioLogado != null) {
          // ‚úÖ VERIFICA SE O USU√ÅRIO AINDA EST√Å ATIVO
          if (!_usuarioLogado!.ativo) {
            print(
              'üö´ [CONTROLLER] Usu√°rio foi desativado durante a sess√£o: ${_usuarioLogado!.nome}',
            );

            // MONITORAMENTO: Sess√£o encerrada por usu√°rio desativado
            SecurityMonitorService.monitorUserActivity(
              usuario: _usuarioLogado!,
              action: 'session_terminated_disabled_user',
              resource: 'auth_system',
              details: 'Sess√£o encerrada porque usu√°rio foi desativado',
              ipAddress: 'mobile_app',
              severity: SecuritySeverity.medium,
            );

            // Fazer logout autom√°tico
            await logout();
            return false;
          }

          notifyListeners();

          // MONITORAMENTO: Sess√£o recuperada
          SecurityMonitorService.monitorUserActivity(
            usuario: _usuarioLogado!,
            action: 'session_restored',
            resource: 'auth_system',
            details: 'Sess√£o de usu√°rio recuperada',
            ipAddress: 'mobile_app',
          );

          return true;
        }
      }
      return false;
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro ao verificar usu√°rio logado: $e');
      return false;
    }
  }

  // ‚úÖ ATUALIZAR M√âTODO DE INICIALIZA√á√ÉO DE SESS√ÉO
  Future<void> inicializarSessao() async {
    if (_sessionInitialized) {
      print('‚è≠Ô∏è [CONTROLLER] Sess√£o j√° inicializada, ignorando...');
      return;
    }

    _sessionInitialized = true;

    try {
      print('üîÑ [CONTROLLER] Inicializando sess√£o...');
      _setLoading(true);

      // üëá INICIAR SERVI√áO DE EXPIRA√á√ÉO AUTOM√ÅTICA
      SessionExpiryService.startAutoCleanup();

      // üëá DEBUG DETALHADO DO FIREBASE
      print('üî• [CONTROLLER] Estado do Firebase Auth:');
      final currentUser = FirebaseAuth.instance.currentUser;
      print('   üë§ CurrentUser: ${currentUser != null}');

      if (currentUser != null) {
        print('   üÜî UID: ${currentUser.uid}');
        print('   üìß Email: ${currentUser.email}');
        print('   ‚úÖ Email verificado: ${currentUser.emailVerified}');
        print('   üïí Criado: ${currentUser.metadata.creationTime}');
        print('   üîê √öltimo login: ${currentUser.metadata.lastSignInTime}');

        // Busca dados completos no Firestore
        _usuarioLogado = await _authService.getUserById(currentUser.uid);

        if (_usuarioLogado != null) {
          // ‚úÖ VERIFICA SE O USU√ÅRIO EST√Å ATIVO
          if (!_usuarioLogado!.ativo) {
            print(
              'üö´ [CONTROLLER] Usu√°rio desativado durante inicializa√ß√£o: ${_usuarioLogado!.nome}',
            );

            // MONITORAMENTO: Sess√£o bloqueada por usu√°rio desativado
            SecurityMonitorService.monitorUserActivity(
              usuario: _usuarioLogado!,
              action: 'session_blocked_disabled_user',
              resource: 'auth_system',
              details: 'Sess√£o bloqueada porque usu√°rio est√° desativado',
              ipAddress: 'mobile_app',
              severity: SecuritySeverity.medium,
            );

            await logout();
            _setLoading(false);
            return;
          }

          _currentDeviceId = await DeviceService.getDeviceId();

          // üëá VERIFICAR SE A SESS√ÉO EST√Å EXPIRADA
          final isExpired = await SessionTrackerService.isSessionExpired(
            _usuarioLogado!.id,
            _currentDeviceId!,
          );

          if (isExpired) {
            print('‚è∞ [CONTROLLER] Sess√£o expirada, fazendo logout...');
            await logout();
          } else {
            print('‚úÖ [CONTROLLER] Sess√£o restaurada: ${_usuarioLogado!.nome}');

            // MONITORAMENTO: Sess√£o restaurada
            SecurityMonitorService.monitorUserActivity(
              usuario: _usuarioLogado!,
              action: 'session_restored',
              resource: 'auth_system',
              details: 'Sess√£o persistente restaurada',
              ipAddress: 'mobile_app',
            );
          }
        } else {
          print('‚ùå [CONTROLLER] Usu√°rio n√£o encontrado no Firestore');
        }
      } else {
        print('‚ÑπÔ∏è [CONTROLLER] Nenhuma sess√£o ativa no Firebase');
      }

      _setLoading(false);
      notifyListeners();
    } catch (e) {
      print('‚ùå [CONTROLLER] Erro ao inicializar sess√£o: $e');
      _setLoading(false);
      _sessionInitialized = false;
    }
  }

  // Criar usu√°rio tempor√°rio para monitoramento quando n√£o h√° usu√°rio real
  Usuario _createTempUser(String email) {
    return Usuario(
      id: 'unknown_${DateTime.now().millisecondsSinceEpoch}',
      nome: 'Usu√°rio Desconhecido',
      email: email,
      perfil: PerfilUsuario(
        id: 'temp_profile',
        nome: 'Tempor√°rio',
        descricao: 'Perfil tempor√°rio para monitoramento',
        permissoes: [],
        dataCriacao: DateTime.now(),
        ativo: true,
      ),
      dataCriacao: DateTime.now(),
      ativo: true,
      emailVerificado: false,
      isAdmin: false,
    );
  }

  // ‚úÖ ATUALIZAR TRADU√á√ÉO DE ERROS DO FIREBASE
  String _traduzirErroFirebase(String codigo) {
    final errors = {
      'user-not-found': 'Nenhuma conta encontrada com este e-mail.',
      'wrong-password': 'Senha incorreta. Verifique suas credenciais.',
      'invalid-email': 'Formato de e-mail inv√°lido.',
      'user-disabled':
          'Conta desativada. Entre em contato com o administrador.',
      'too-many-requests':
          'Muitas tentativas. Aguarde 15 minutos e tente novamente.',
      'operation-not-allowed': 'Opera√ß√£o n√£o permitida no momento.',
      'network-request-failed': 'Erro de conex√£o. Verifique sua internet.',
      'email-already-in-use': 'Este e-mail j√° est√° cadastrado.',
      'weak-password': 'Senha muito fraca. Use pelo menos 6 caracteres.',
      'configuration-not-found': 'Erro de configura√ß√£o do sistema.',
      'invalid-credential': 'Credenciais inv√°lidas ou expiradas.',
      'account-exists-with-different-credential':
          'Conta j√° existe com credenciais diferentes.',
      'requires-recent-login': 'Requer login recente. Fa√ßa login novamente.',
    };

    return errors[codigo] ?? 'Erro desconhecido: $codigo';
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String message) {
    _errorMessage = message;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }

  // üëá RASTREAR ATIVIDADE DO USU√ÅRIO
  void _startActivityTracking() {
    // Atualizar atividade a cada 5 minutos
    _activityTimer = Timer.periodic(Duration(minutes: 5), (timer) async {
      if (_usuarioLogado != null && _currentDeviceId != null) {
        await SessionTrackerService.updateLastActivity(
          _usuarioLogado!.id,
          _currentDeviceId!,
        );
        print('üïí [ACTIVITY] Atividade atualizada');
      }
    });
  }

  // üëá M√âTODO PARA ATUALIZAR ATIVIDADE MANUALMENTE (chamar em intera√ß√µes)
  void recordUserActivity() async {
    if (_usuarioLogado != null && _currentDeviceId != null) {
      await SessionTrackerService.updateLastActivity(
        _usuarioLogado!.id,
        _currentDeviceId!,
      );
    }
  }
}
