import 'dart:async';
import 'dart:js_util' as js_util;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:js/js.dart';
import 'package:projeto_padrao/app/app_widget.dart';
import 'package:projeto_padrao/views/notifications/notifications_page.dart';

// ‚úÖ INTEROP SIMPLIFICADO
@JS()
external dynamic get Notification;

@JS('Notification.permission')
external String get notificationPermission;

@JS('Notification.requestPermission')
external Future<dynamic> requestNotificationPermission();

class WebNotificationService {
  static final WebNotificationService _instance =
      WebNotificationService._internal();
  factory WebNotificationService() => _instance;
  WebNotificationService._internal();

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  final StreamController<Map<String, dynamic>> _notificationStream =
      StreamController.broadcast();
  bool _isInitialized = false;

  Stream<Map<String, dynamic>> get notificationStream =>
      _notificationStream.stream;

  Future<void> initialize() async {
    if (_isInitialized || !kIsWeb) return;

    try {
      print('üåê Inicializando WebNotificationService...');

      await _setupFirebaseMessaging();
      _setupTokenMonitoring();
      // ‚úÖ ADICIONAR COMUNICA√á√ÉO COM SERVICE WORKER
      // _setupServiceWorkerCommunication();

      _isInitialized = true;
      print('‚úÖ WebNotificationService inicializado');
    } catch (e) {
      print('‚ùå Erro WebNotificationService: $e');
    }
  } // Monitorar mudan√ßas no token

  void _setupTokenMonitoring() {
    _firebaseMessaging.onTokenRefresh.listen(_saveTokenToFirestore);
  }

  Future<void> _setupFirebaseMessaging() async {
    try {
      final NotificationSettings settings = await _firebaseMessaging
          .requestPermission(alert: true, badge: true, sound: true);

      print('üåê Status permiss√£o Firebase: ${settings.authorizationStatus}');

      await _firebaseMessaging.setForegroundNotificationPresentationOptions(
        alert: true,
        badge: true,
        sound: true,
      );

      final String? token = await _firebaseMessaging.getToken();
      if (token != null) {
        await _saveTokenToFirestore(token);
        print('üåê FCM Token obtido');
      }

      _setupMessageListeners();

      print('üéØ Firebase Messaging configurado');
    } catch (e) {
      print('‚ùå Erro configura√ß√£o FCM: $e');
    }
  }

  void _setupMessageListeners() {
    // 1. ‚úÖ NOTIFICA√á√ïES EM PRIMEIRO PLANO
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üåê Notifica√ß√£o em foreground: ${message.messageId}');

      final webMessage = {
        'id': message.messageId,
        'title': message.notification?.title ?? 'Nova notifica√ß√£o',
        'body': message.notification?.body ?? '',
        'data': message.data,
        'type': 'foreground',
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      };

      _notificationStream.add(webMessage);
      _showNativeNotification(webMessage);
    });

    // 2. ‚úÖ NOTIFICA√á√ïES CLICADAS - SEM NENHUMA NAVEGA√á√ÉO
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('üåê Notifica√ß√£o clicada - APENAS LOGGING');

      // ‚úÖ APENAS ADICIONAR √Ä STREAM - SEM NAVEGAR
      _notificationStream.add({
        'id': message.messageId,
        'title': message.notification?.title,
        'body': message.notification?.body,
        'data': message.data,
        'type': 'clicked',
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      });

      // ‚ùå REMOVIDO COMPLETAMENTE: _navigateToNotifications()
      // ‚ùå REMOVIDO COMPLETAMENTE: _focusCurrentWindow()
      // ‚ùå REMOVIDO COMPLETAMENTE: Qualquer navega√ß√£o autom√°tica
    });

    print('‚úÖ Listeners configurados - SEM NAVEGA√á√ÉO AUTOM√ÅTICA');
  }

  // ‚úÖ M√âTODO COMPLETAMENTE CORRIGIDO
  void _showNativeNotification(Map<String, dynamic> message) {
    try {
      print('üîÑ Criando notifica√ß√£o nativa...');

      if (Notification == null) {
        print('‚ùå Notification API n√£o dispon√≠vel');
        return;
      }

      if (notificationPermission != 'granted') {
        print('‚ùå Permiss√£o n√£o concedida: $notificationPermission');
        return;
      }

      // ‚úÖ CORRE√á√ÉO: Converter dados manualmente para evitar problemas com jsify
      final dataJson = _convertDataToJson(message['data'] ?? {});

      final script =
          '''
        try {
    console.log('üéØ Criando notifica√ß√£o...');
    
    const options = {
      body: "${_escapeString(message['body']?.toString() ?? '')}",
      icon: "/icons/icon-192.png",
      badge: "/icons/icon-72.png",
      tag: "notification-${message['id']}",
      requireInteraction: false, // ‚úÖ Deixa usu√°rio decidir
    };
    
    const notification = new Notification("${_escapeString(message['title']?.toString() ?? 'Nova notifica√ß√£o')}", options);
    
    console.log('‚úÖ Notifica√ß√£o criada');
    
    notification.onclick = function(event) {
      console.log('üåê Notifica√ß√£o clicada - Apenas fechando');
      notification.close();
      // ‚ùå SEM window.focus() - deixa o browser decidir
    };
    
    // Auto-fechar ap√≥s 10 segundos
    setTimeout(() => {
      try {
        notification.close();
      } catch(e) {
        console.log('‚ö†Ô∏è Erro ao fechar notifica√ß√£o:', e);
      }
    }, 10000);
    
  } catch(error) {
    console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
  }
''';

      print('üìú Executando script JavaScript...');
      _executeJavaScript(script);
    } catch (e) {
      print('‚ùå Erro ao mostrar notifica√ß√£o: $e');
    }
  }

  // ‚úÖ CONVERTER DADOS PARA JSON MANUALMENTE
  String _convertDataToJson(Map<String, dynamic> data) {
    try {
      if (data.isEmpty) return '{}';

      final entries = data.entries
          .map((entry) {
            final key = entry.key;
            final value = entry.value is String
                ? '"${_escapeString(entry.value)}"'
                : entry.value;
            return '"$key": $value';
          })
          .join(',');

      return '{$entries}';
    } catch (e) {
      print('‚ùå Erro ao converter dados para JSON: $e');
      return '{}';
    }
  }

  // ‚úÖ ESCAPAR STRING PARA JAVASCRIPT
  String _escapeString(String text) {
    return text
        .replaceAll(r'$', r'\$')
        .replaceAll('"', r'\"')
        .replaceAll('\n', r'\n')
        .replaceAll('\r', r'\r')
        .replaceAll('\t', r'\t');
  }

  // ‚úÖ EXECUTAR JAVASCRIPT DE FORMA SEGURA
  void _executeJavaScript(String script) {
    try {
      // M√©todo 1: Usar eval diretamente
      js_util.callMethod(js_util.globalThis, 'eval', [script]);
    } catch (e) {
      print('‚ùå Erro ao executar JavaScript: $e');

      // M√©todo 2: Tentar criar elemento script
      try {
        final scriptElement =
            '''
          try {
            $script
          } catch(jsError) {
            console.error('Erro JavaScript:', jsError);
          }
        ''';
        js_util.callMethod(js_util.globalThis, 'eval', [scriptElement]);
      } catch (e2) {
        print('‚ùå Erro alternativo tamb√©m falhou: $e2');
      }
    }
  }

  Future<void> _saveTokenToFirestore(String token) async {
    final user = _auth.currentUser;
    if (user != null) {
      try {
        await _firestore.collection('usuarios').doc(user.uid).update({
          'fcmToken': token,
          'dataAtualizacao': FieldValue.serverTimestamp(),
        });
      } catch (e) {
        print('‚ùå Erro ao salvar token: $e');
      }
    }
  }

  void _handleNotificationClick(RemoteMessage message) {
    print('üåê Notifica√ß√£o clicada - Apenas logging');

    // ‚úÖ APENAS LOG, SEM NAVEGAR
    _notificationStream.add({
      'id': message.messageId,
      'title': message.notification?.title,
      'body': message.notification?.body,
      'data': message.data,
      'type': 'clicked',
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });

    // ‚ùå REMOVIDO: _navigateToNotifications() e _focusCurrentWindow()
  }

  void _navigateToNotifications() {
    try {
      final context = NavigationService.context;
      if (context != null) {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => NotificationsPage()),
          );
        });
      }
    } catch (e) {
      print('‚ùå Erro navega√ß√£o: $e');
    }
  }

  // ‚úÖ M√âTODO DE TESTE MELHORADO
  Future<void> testNotification() async {
    print('\nüß™ TESTE DE NOTIFICA√á√ÉO');
    print('=' * 30);

    // 1. Teste de notifica√ß√£o simples primeiro
    print('1. üéØ Testando notifica√ß√£o SIMPLES...');
    _testSimpleNotification();

    // 2. Aguardar um pouco e testar notifica√ß√£o completa
    print('2. ‚è≥ Aguardando 2 segundos...');
    await Future.delayed(Duration(seconds: 2));

    print('3. üéØ Testando notifica√ß√£o COMPLETA...');
    _showNativeNotification({
      'title': '‚úÖ Teste Completo',
      'body': 'Esta √© uma notifica√ß√£o de teste completa!',
      'id': 'test-complete-${DateTime.now().millisecondsSinceEpoch}',
      'data': {
        'type': 'test',
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      },
    });

    // 3. Testar Firebase
    print('4. üì§ Testando Firebase Functions...');
    final currentUser = _auth.currentUser;
    if (currentUser != null) {
      final result = await sendNotification(
        toUserId: currentUser.uid,
        title: 'Teste Firebase',
        message: 'Notifica√ß√£o via Firebase Functions',
      );
      print(
        '   - Firebase: ${result['success'] ? '‚úÖ' : '‚ùå ${result['error']}'}',
      );
    }

    print('üéâ TESTE COMPLETADO');
  }

  // ‚úÖ TESTE SIMPLES - M√çNIMO NECESS√ÅRIO
  void _testSimpleNotification() {
    try {
      final simpleScript = '''
        try {
          console.log('üß™ TESTE SIMPLES: Verificando Notification API...');
          
          if (typeof Notification === 'undefined') {
            console.error('‚ùå Notification API n√£o dispon√≠vel');
            return;
          }
          
          console.log('‚úÖ Notification API dispon√≠vel');
          console.log('üìã Permiss√£o atual:', Notification.permission);
          
          if (Notification.permission === 'granted') {
            console.log('üéØ Tentando criar notifica√ß√£o simples...');
            
            const notification = new Notification('Teste Simples ‚úÖ', {
              body: 'Notifica√ß√£o de teste simples funcionando!',
              icon: '/icons/icon-192.png'
            });
            
            notification.onclick = function() {
              console.log('‚úÖ Notifica√ß√£o simples clicada!');
              notification.close();
              window.focus();
            };
            
            setTimeout(() => notification.close(), 5000);
            console.log('‚úÖ Notifica√ß√£o simples criada com sucesso!');
            
          } else {
            console.log('‚ùå Permiss√£o n√£o concedida para notifica√ß√£o simples');
          }
          
        } catch(error) {
          console.error('‚ùå Erro no teste simples:', error);
        }
      ''';

      _executeJavaScript(simpleScript);
    } catch (e) {
      print('‚ùå Erro no teste simples: $e');
    }
  }

  // ‚úÖ M√âTODO SENDNOTIFICATION MELHORADO
  // ‚úÖ M√âTODO SENDNOTIFICATION CORRIGIDO
  Future<Map<String, dynamic>> sendNotification({
    required String toUserId,
    required String title,
    required String message,
    String type = 'general',
    Map<String, dynamic>? data,
  }) async {
    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) {
        return {'success': false, 'error': 'Usu√°rio n√£o autenticado'};
      }

      print('üì§ ENVIANDO NOTIFICA√á√ÉO VIA FIREBASE FUNCTIONS...');

      final callable = FirebaseFunctions.instance.httpsCallable(
        'createNotification',
      );

      // ‚úÖ CORRE√á√ÉO: CONVERTER VALORES PARA STRING NO FLUTTER TAMB√âM
      final stringifiedData = {};
      if (data != null) {
        data.forEach((key, value) {
          // Converter para string se n√£o for string
          stringifiedData[key] = value is String ? value : value.toString();
        });
      }

      final payload = <String, dynamic>{
        'toUserId': toUserId,
        'title': title,
        'message': message,
        'type': type,
        'platform': 'web',
        'additionalData': {
          ...stringifiedData,
          //'click_action': 'FLUTTER_NOTIFICATION_CLICK',
          'fromUserId': currentUser.uid,
          'timestamp': DateTime.now().millisecondsSinceEpoch
              .toString(), // ‚úÖ STRING
        },
      };

      print('   - Payload corrigido: $payload');

      final result = await callable.call(payload);
      print('   - ‚úÖ Resposta do Firebase: ${result.data}');

      return {
        'success': true,
        'notificationId': result.data['notificationId'],
        'message': 'Notifica√ß√£o enviada com sucesso',
      };
    } catch (e) {
      print('‚ùå ERRO ao enviar notifica√ß√£o: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  Stream<int> getUnreadCount() {
    final userId = _auth.currentUser?.uid;
    if (userId == null) return Stream.value(0);

    return _firestore
        .collection('notifications')
        .where('toUserId', isEqualTo: userId)
        .where('read', isEqualTo: false)
        .snapshots()
        .map((snapshot) => snapshot.docs.length);
  }

  void dispose() {
    _notificationStream.close();
    _isInitialized = false;
  }

  // ‚úÖ ADICIONE ESTE M√âTODO PARA DIAGN√ìSTICO
  Future<void> debugSendNotification() async {
    print('\nüîç DIAGN√ìSTICO SENDNOTIFICATION');
    print('=' * 40);

    final currentUser = _auth.currentUser;
    if (currentUser == null) {
      print('‚ùå Usu√°rio n√£o autenticado');
      return;
    }

    // 1. ‚úÖ VERIFICAR TOKEN DO USU√ÅRIO ATUAL
    print('1. üîç Verificando token do usu√°rio atual...');
    final userDoc = await _firestore
        .collection('usuarios')
        .doc(currentUser.uid)
        .get();
    final userToken = userDoc.data()?['fcmToken'];
    print('   - Token no Firestore: ${userToken != null ? "‚úÖ" : "‚ùå"}');
    if (userToken != null) {
      print('   - Token: ${userToken.substring(0, 20)}...');
    }

    // 2. ‚úÖ VERIFICAR TOKEN ATUAL DO FIREBASE
    print('2. üîç Verificando token atual do Firebase...');
    final currentToken = await _firebaseMessaging.getToken();
    print('   - Token atual: ${currentToken != null ? "‚úÖ" : "‚ùå"}');
    if (currentToken != null) {
      print('   - Token atual: ${currentToken.substring(0, 20)}...');
    }

    // 3. ‚úÖ COMPARAR TOKENS
    if (userToken != null && currentToken != null) {
      print('3. üîç Comparando tokens...');
      if (userToken == currentToken) {
        print('   - ‚úÖ Tokens s√£o iguais');
      } else {
        print('   - ‚ùå Tokens DIFERENTES! Atualizando...');
        await _saveTokenToFirestore(currentToken);
      }
    }

    // 4. ‚úÖ TESTAR ENVIO DIRETO
    print('4. üß™ Testando envio de notifica√ß√£o...');
    final result = await sendNotification(
      toUserId: currentUser.uid,
      title: 'Teste de Diagn√≥stico',
      message: 'Esta notifica√ß√£o deve aparecer no seu PC!',
      data: {'type': 'diagnostic', 'test': 'true'},
    );

    print('5. üìä Resultado do envio:');
    print('   - Sucesso: ${result['success']}');
    print('   - Notification ID: ${result['notificationId']}');
    if (result['error'] != null) {
      print('   - Erro: ${result['error']}');
    }

    // 6. ‚úÖ VERIFICAR NO FIRESTORE
    if (result['success'] == true && result['notificationId'] != null) {
      print('6. üîç Verificando notifica√ß√£o no Firestore...');
      await Future.delayed(Duration(seconds: 2)); // Aguardar processamento

      final notificationDoc = await _firestore
          .collection('notifications')
          .doc(result['notificationId'])
          .get();

      if (notificationDoc.exists) {
        print('   - ‚úÖ Notifica√ß√£o salva no Firestore');
        final data = notificationDoc.data();
        print('   - Status: ${data?['status']}');
        print('   - Platform: ${data?['platform']}');
        print('   - Sent: ${data?['sent']}');
      } else {
        print('   - ‚ùå Notifica√ß√£o N√ÉO encontrada no Firestore');
      }
    }

    // 7. ‚úÖ TESTE ALTERNATIVO: Notifica√ß√£o local
    print('7. üéØ Testando notifica√ß√£o local...');
    _showNativeNotification({
      'title': 'Teste Local ‚úÖ',
      'body': 'Se esta aparece, o problema √© no Firebase',
      'id': 'local-test-${DateTime.now().millisecondsSinceEpoch}',
      'data': {'type': 'local_test'},
    });

    print('\nüéØ DIAGN√ìSTICO COMPLETO');
  }

  // ‚úÖ NO WEBNOTIFICATIONSERVICE - ADICIONE ESTE M√âTODO
  void _setupServiceWorkerCommunication() {
    try {
      // ‚úÖ INFORMAR AO SERVICE WORKER QUE O APP EST√Å PRONTO
      final script = '''
      if (navigator.serviceWorker && navigator.serviceWorker.controller) {
        navigator.serviceWorker.controller.postMessage({
          type: 'APP_READY',
          ready: true,
          timestamp: Date.now()
        });
        console.log('üì® App informou ao Service Worker que est√° pronto');
      }
    ''';

      _executeJavaScript(script);

      // ‚úÖ OUVINTE PARA MENSAGENS DO SERVICE WORKER
      final messageScript = '''
      navigator.serviceWorker.addEventListener('message', function(event) {
        console.log('üì® Mensagem do Service Worker:', event.data);
        
        if (event.data.type === 'NOTIFICATION_CLICK') {
          console.log('üéØ Service Worker solicitou navega√ß√£o para notifica√ß√µes');
          // O Flutter vai lidar com a navega√ß√£o internamente
        }
      });
    ''';

      _executeJavaScript(messageScript);
    } catch (e) {
      print('‚ö†Ô∏è Erro na comunica√ß√£o com Service Worker: $e');
    }
  }
}
